Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  us/call  us/call  name    
 62.23      3.34     3.34  6212526     0.54     0.60  TraceRay
 16.58      4.23     0.89  4098609     0.22     1.30  PerPixel
  5.59      4.53     0.30  4892688     0.06     0.08  ClosestHit
  4.84      4.79     0.26  9471269     0.03     0.03  normalize
  3.91      5.00     0.21 15516537     0.01     0.02  random_float
  2.05      5.11     0.11 15382561     0.01     0.01  PCG_Hash
  2.05      5.22     0.11  3013258     0.04     0.06  miss
  1.68      5.31     0.09  9912565     0.01     0.01  clamp
  0.56      5.34     0.03  2615868     0.01     0.01  reflect
  0.56      5.37     0.03                             main
  0.00      5.37     0.00        1     0.00     0.00  Snowman
  0.00      5.37     0.00        1     0.00     0.00  ex
  0.00      5.37     0.00        1     0.00     0.00  init

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.19% of 5.37 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.03    5.34                 main [1]
                0.89    4.45 4098609/4098609     PerPixel [2]
                0.00    0.00       1/9471269     normalize [6]
                0.00    0.00       1/1           Snowman [11]
                0.00    0.00       1/1           init [13]
                0.00    0.00       1/1           ex [12]
-----------------------------------------------
                0.89    4.45 4098609/4098609     main [1]
[2]     99.4    0.89    4.45 4098609         PerPixel [2]
                3.34    0.37 6212526/6212526     TraceRay [3]
                0.21    0.11 15516537/15516537     random_float [5]
                0.11    0.09 3013258/3013258     miss [7]
                0.10    0.00 3698938/9471269     normalize [6]
                0.09    0.00 9912565/9912565     clamp [9]
                0.03    0.00 2615868/2615868     reflect [10]
-----------------------------------------------
                3.34    0.37 6212526/6212526     PerPixel [2]
[3]     69.1    3.34    0.37 6212526         TraceRay [3]
                0.30    0.07 4892688/4892688     ClosestHit [4]
-----------------------------------------------
                0.30    0.07 4892688/4892688     TraceRay [3]
[4]      7.0    0.30    0.07 4892688         ClosestHit [4]
                0.07    0.00 2670183/9471269     normalize [6]
-----------------------------------------------
                0.21    0.11 15516537/15516537     PerPixel [2]
[5]      6.0    0.21    0.11 15516537         random_float [5]
                0.11    0.00 15382561/15382561     PCG_Hash [8]
-----------------------------------------------
                0.00    0.00       1/9471269     main [1]
                0.07    0.00 2670183/9471269     ClosestHit [4]
                0.09    0.00 3102147/9471269     miss [7]
                0.10    0.00 3698938/9471269     PerPixel [2]
[6]      4.8    0.26    0.00 9471269         normalize [6]
-----------------------------------------------
                0.11    0.09 3013258/3013258     PerPixel [2]
[7]      3.6    0.11    0.09 3013258         miss [7]
                0.09    0.00 3102147/9471269     normalize [6]
-----------------------------------------------
                0.11    0.00 15382561/15382561     random_float [5]
[8]      2.0    0.11    0.00 15382561         PCG_Hash [8]
-----------------------------------------------
                0.09    0.00 9912565/9912565     PerPixel [2]
[9]      1.7    0.09    0.00 9912565         clamp [9]
-----------------------------------------------
                0.03    0.00 2615868/2615868     PerPixel [2]
[10]     0.6    0.03    0.00 2615868         reflect [10]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[11]     0.0    0.00    0.00       1         Snowman [11]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[12]     0.0    0.00    0.00       1         ex [12]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[13]     0.0    0.00    0.00       1         init [13]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [4] ClosestHit              [9] clamp                   [6] normalize
   [8] PCG_Hash               [12] ex                      [5] random_float
   [2] PerPixel               [13] init                   [10] reflect
  [11] Snowman                 [1] main
   [3] TraceRay                [7] miss
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 57.49      2.31     2.31  5537258     0.00     0.00  TraceRay
 12.82      2.83     0.52  3470797     0.00     0.00  PerPixel
  7.59      3.13     0.31 37653118     0.00     0.00  random_float
  6.35      3.39     0.26  5148934     0.00     0.00  ClosestHit
  5.72      3.62     0.23 38023964     0.00     0.00  PCG_Hash
  4.48      3.80     0.18 11831072     0.00     0.00  normalize
  2.49      3.90     0.10  3007508     0.00     0.00  miss
  2.36      3.99     0.10  9286634     0.00     0.00  clamp
  0.50      4.01     0.02                             main
  0.12      4.02     0.01        1     5.00     5.00  ex
  0.12      4.02     0.01        1     5.00     5.00  init
  0.00      4.02     0.00        1     0.00     0.00  Snowman

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.25% of 4.02 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.02    4.00                 main [1]
                0.52    3.48 3470797/3470797     PerPixel [2]
                0.01    0.00       1/1           init [11]
                0.01    0.00       1/1           ex [10]
                0.00    0.00       1/11831072     normalize [7]
                0.00    0.00       1/1           Snowman [12]
-----------------------------------------------
                0.52    3.48 3470797/3470797     main [1]
[2]     99.3    0.52    3.48 3470797         PerPixel [2]
                2.31    0.30 5537258/5537258     TraceRay [3]
                0.31    0.23 37653118/37653118     random_float [4]
                0.10    0.05 3007508/3007508     miss [8]
                0.10    0.00 9286634/9286634     clamp [9]
                0.09    0.00 6044923/11831072     normalize [7]
-----------------------------------------------
                2.31    0.30 5537258/5537258     PerPixel [2]
[3]     64.9    2.31    0.30 5537258         TraceRay [3]
                0.26    0.04 5148934/5148934     ClosestHit [5]
-----------------------------------------------
                0.31    0.23 37653118/37653118     PerPixel [2]
[4]     13.3    0.31    0.23 37653118         random_float [4]
                0.23    0.00 38023964/38023964     PCG_Hash [6]
-----------------------------------------------
                0.26    0.04 5148934/5148934     TraceRay [3]
[5]      7.4    0.26    0.04 5148934         ClosestHit [5]
                0.04    0.00 2780017/11831072     normalize [7]
-----------------------------------------------
                0.23    0.00 38023964/38023964     random_float [4]
[6]      5.7    0.23    0.00 38023964         PCG_Hash [6]
-----------------------------------------------
                0.00    0.00       1/11831072     main [1]
                0.04    0.00 2780017/11831072     ClosestHit [5]
                0.05    0.00 3006131/11831072     miss [8]
                0.09    0.00 6044923/11831072     PerPixel [2]
[7]      4.5    0.18    0.00 11831072         normalize [7]
-----------------------------------------------
                0.10    0.05 3007508/3007508     PerPixel [2]
[8]      3.6    0.10    0.05 3007508         miss [8]
                0.05    0.00 3006131/11831072     normalize [7]
-----------------------------------------------
                0.10    0.00 9286634/9286634     PerPixel [2]
[9]      2.4    0.10    0.00 9286634         clamp [9]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[10]     0.1    0.01    0.00       1         ex [10]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[11]     0.1    0.01    0.00       1         init [11]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[12]     0.0    0.00    0.00       1         Snowman [12]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [5] ClosestHit              [3] TraceRay                [1] main
   [6] PCG_Hash                [9] clamp                   [8] miss
   [2] PerPixel               [10] ex                      [7] normalize
  [12] Snowman                [11] init                    [4] random_float
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 52.40      1.55     1.55  3632631     0.00     0.00  TraceRay
 14.92      1.99     0.44  2817281     0.00     0.00  PerPixel
  8.31      2.23     0.25  3288013     0.00     0.00  ClosestHit
  7.63      2.46     0.23 25866947     0.00     0.00  random_float
  7.12      2.67     0.21 26291553     0.00     0.00  PCG_Hash
  4.75      2.81     0.14  7394218     0.00     0.00  normalize
  2.37      2.88     0.07  1919792     0.00     0.00  miss
  1.70      2.93     0.05  6882674     0.00     0.00  clamp
  0.34      2.94     0.01                             main
  0.34      2.95     0.01                             random_uint8
  0.17      2.95     0.01        1     5.00     5.00  init
  0.00      2.95     0.00        1     0.00     0.00  Snowman
  0.00      2.95     0.00        1     0.00     0.00  ex

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.34% of 2.95 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.7    0.01    2.93                 main [1]
                0.44    2.49 2817281/2817281     PerPixel [2]
                0.01    0.00       1/1           init [11]
                0.00    0.00       1/7394218     normalize [7]
                0.00    0.00       1/1           Snowman [12]
                0.00    0.00       1/1           ex [13]
-----------------------------------------------
                0.44    2.49 2817281/2817281     main [1]
[2]     99.2    0.44    2.49 2817281         PerPixel [2]
                1.55    0.28 3632631/3632631     TraceRay [3]
                0.23    0.21 25866947/25866947     random_float [4]
                0.07    0.04 1919792/1919792     miss [8]
                0.07    0.00 3670068/7394218     normalize [7]
                0.05    0.00 6882674/6882674     clamp [9]
-----------------------------------------------
                1.55    0.28 3632631/3632631     PerPixel [2]
[3]     61.7    1.55    0.28 3632631         TraceRay [3]
                0.25    0.03 3288013/3288013     ClosestHit [5]
-----------------------------------------------
                0.23    0.21 25866947/25866947     PerPixel [2]
[4]     14.7    0.23    0.21 25866947         random_float [4]
                0.21    0.00 26291553/26291553     PCG_Hash [6]
-----------------------------------------------
                0.25    0.03 3288013/3288013     TraceRay [3]
[5]      9.3    0.25    0.03 3288013         ClosestHit [5]
                0.03    0.00 1625890/7394218     normalize [7]
-----------------------------------------------
                0.21    0.00 26291553/26291553     random_float [4]
[6]      7.1    0.21    0.00 26291553         PCG_Hash [6]
-----------------------------------------------
                0.00    0.00       1/7394218     main [1]
                0.03    0.00 1625890/7394218     ClosestHit [5]
                0.04    0.00 2098259/7394218     miss [8]
                0.07    0.00 3670068/7394218     PerPixel [2]
[7]      4.7    0.14    0.00 7394218         normalize [7]
-----------------------------------------------
                0.07    0.04 1919792/1919792     PerPixel [2]
[8]      3.7    0.07    0.04 1919792         miss [8]
                0.04    0.00 2098259/7394218     normalize [7]
-----------------------------------------------
                0.05    0.00 6882674/6882674     PerPixel [2]
[9]      1.7    0.05    0.00 6882674         clamp [9]
-----------------------------------------------
                                                 <spontaneous>
[10]     0.3    0.01    0.00                 random_uint8 [10]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[11]     0.2    0.01    0.00       1         init [11]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[12]     0.0    0.00    0.00       1         Snowman [12]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[13]     0.0    0.00    0.00       1         ex [13]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [5] ClosestHit              [9] clamp                   [7] normalize
   [6] PCG_Hash               [13] ex                      [4] random_float
   [2] PerPixel               [11] init                   [10] random_uint8
  [12] Snowman                 [1] main
   [3] TraceRay                [8] miss
